openapi: 3.0.4
info:
  title: documentation API
  description: Mon API de documentation permettant de tranformer un documentation en markdown et de la distribuer
  termsOfService: https://google.com
  contact:
    name: axel teyssier
    url: https://google.com
    email: ''
  version: V1
paths:
  /api/Ai/ChatWithAi:
    post:
      tags:
        - Ai
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputChat'
          text/json:
            schema:
              $ref: '#/components/schemas/InputChat'
          application/*+json:
            schema:
              $ref: '#/components/schemas/InputChat'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/Ai/GetAllModel:
    get:
      tags:
        - Ai
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/Documentation/Upload:
    post:
      tags:
        - Documentation
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - ZipFile
              type: object
              properties:
                ZipFile:
                  type: string
                  format: binary
                IsPublic:
                  type: boolean
                Title:
                  type: string
                Description:
                  type: string
                Tags:
                  type: string
            encoding:
              ZipFile:
                style: form
              IsPublic:
                style: form
              Title:
                style: form
              Description:
                style: form
              Tags:
                style: form
      responses:
        '200':
          description: OK
  /api/Documentation/UploadFile:
    post:
      tags:
        - Documentation
      parameters:
        - name: DocumentId
          in: query
          schema:
            type: integer
            format: int32
        - name: path
          in: query
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                style: form
      responses:
        '200':
          description: OK
  /api/Documentation/download-documentFile:
    get:
      tags:
        - Documentation
      parameters:
        - name: documentId
          in: query
          schema:
            type: integer
            format: int32
        - name: documentFileId
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/Documentation/download-documentation:
    get:
      tags:
        - Documentation
      parameters:
        - name: documentId
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/Documentation/SearchByPrompt:
    get:
      tags:
        - Documentation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputFindInPrompt'
          text/json:
            schema:
              $ref: '#/components/schemas/InputFindInPrompt'
          application/*+json:
            schema:
              $ref: '#/components/schemas/InputFindInPrompt'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/Documentation/SearchByTag:
    get:
      tags:
        - Documentation
      parameters:
        - name: tag
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OutputDocumentFile'
  /api/Login:
    post:
      tags:
        - Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          text/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
          application/*+json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: OK
  /api/Login/test:
    post:
      tags:
        - Login
      responses:
        '200':
          description: OK
  /api/Right/Get-Rigth:
    get:
      tags:
        - Right
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPermission'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPermission'
            text/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPermission'
  /api/Right/Update-Rigth:
    post:
      tags:
        - Right
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputRigth'
          text/json:
            schema:
              $ref: '#/components/schemas/InputRigth'
          application/*+json:
            schema:
              $ref: '#/components/schemas/InputRigth'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/UserPermission'
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermission'
            text/json:
              schema:
                $ref: '#/components/schemas/UserPermission'
  /api/Right/Delete-Rigth:
    post:
      tags:
        - Right
      parameters:
        - name: documentationId
          in: query
          schema:
            type: integer
            format: int32
        - name: UserToChange
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
  /api/User/create-user:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputUserDto'
          text/json:
            schema:
              $ref: '#/components/schemas/InputUserDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/InputUserDto'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/OutputUserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/OutputUserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/OutputUserDto'
  /api/User/get-user:
    get:
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/OutputUserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/OutputUserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/OutputUserDto'
  /api/User/update-user:
    patch:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputUpdateUserDto'
          text/json:
            schema:
              $ref: '#/components/schemas/InputUpdateUserDto'
          application/*+json:
            schema:
              $ref: '#/components/schemas/InputUpdateUserDto'
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/OutputUserDto'
            application/json:
              schema:
                $ref: '#/components/schemas/OutputUserDto'
            text/json:
              schema:
                $ref: '#/components/schemas/OutputUserDto'
  /api/User/delete-user:
    delete:
      tags:
        - User
      parameters:
        - name: userToDelete
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
            application/json:
              schema:
                type: boolean
            text/json:
              schema:
                type: boolean
components:
  schemas:
    Documentation:
      type: object
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
          nullable: true
        tags:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        rootPath:
          type: string
          nullable: true
        isPublic:
          type: boolean
        documentationFiles:
          type: array
          items:
            $ref: '#/components/schemas/DocumentationFile'
          nullable: true
        userPermissions:
          type: array
          items:
            $ref: '#/components/schemas/UserPermission'
          nullable: true
      additionalProperties: false
    DocumentationFile:
      type: object
      properties:
        id:
          type: integer
          format: int32
        documentationId:
          type: integer
          format: int32
        documentation:
          $ref: '#/components/schemas/Documentation'
        tags:
          type: string
          nullable: true
        fullPath:
          type: string
          nullable: true
        isFolder:
          type: boolean
        description:
          type: string
          nullable: true
      additionalProperties: false
    InputChat:
      type: object
      properties:
        prompt:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
        context:
          type: string
          nullable: true
        model:
          type: string
          nullable: true
      additionalProperties: false
    InputFindInPrompt:
      type: object
      properties:
        model:
          type: string
          nullable: true
        prompt:
          type: string
          nullable: true
      additionalProperties: false
    InputRigth:
      type: object
      properties:
        documentationId:
          type: integer
          format: int32
        userToChange:
          type: integer
          format: int32
        read:
          type: boolean
        write:
          type: boolean
        delete:
          type: boolean
        admin:
          type: boolean
      additionalProperties: false
    InputUpdateUserDto:
      type: object
      properties:
        password:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
        emailAddress:
          type: string
          nullable: true
      additionalProperties: false
    InputUserDto:
      type: object
      properties:
        password:
          type: string
          nullable: true
        username:
          type: string
          nullable: true
        emailAddress:
          type: string
          nullable: true
      additionalProperties: false
    OutputDocumentFile:
      type: object
      properties:
        id:
          type: integer
          format: int32
        documentationId:
          type: integer
          format: int32
        tags:
          type: array
          items:
            type: string
          nullable: true
        fileContent:
          type: string
          format: byte
          nullable: true
      additionalProperties: false
    OutputUserDto:
      type: object
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
          nullable: true
        emailAddress:
          type: string
          nullable: true
      additionalProperties: false
    UserLogin:
      type: object
      properties:
        userEmail:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
      additionalProperties: false
    UserModel:
      type: object
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
          nullable: true
        emailAddress:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        userPermissions:
          type: array
          items:
            $ref: '#/components/schemas/UserPermission'
          nullable: true
        isGlobalAdmin:
          type: boolean
      additionalProperties: false
    UserPermission:
      type: object
      properties:
        id:
          type: integer
          format: int32
        userId:
          type: integer
          format: int32
        user:
          $ref: '#/components/schemas/UserModel'
        documentationId:
          type: integer
          format: int32
        documentation:
          $ref: '#/components/schemas/Documentation'
        canRead:
          type: boolean
        canWrite:
          type: boolean
        canDelete:
          type: boolean
        isAdmin:
          type: boolean
        grantedDate:
          type: string
          format: date-time
      additionalProperties: false
  securitySchemes:
    Bearer:
      type: http
      description: 'JWT Authorization header using the Bearer scheme. Example: Authorization: Bearer { token }'
      scheme: bearer
      bearerFormat: JWT
security:
  - Bearer: [ ]